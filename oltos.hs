{-# LANGUAGE OverloadedStrings #-}

import Control.Applicative
import Data.List
import System.Directory

import Data.Time
import Filesystem.Path.CurrentOS (decodeString)
import Graphics.Exif as Exif
import Graphics.ImageMagick.MagickWand
import System.Locale (defaultTimeLocale)

import Text.Hastache
import Text.Hastache.Context 
import qualified Data.ByteString.Lazy.Char8 as LZ

data Media = Photo { path :: FilePath
                   , date :: LocalTime
                   }
  deriving Show

main = do
  imgs <- filter isImage <$> (getCurrentDirectory >>= getDirectoryContents)
  media <- mapM parseImage $ take 10 imgs
  -- Order the media from most recent to oldest
  let media' = sortBy (\a b -> compare (date b) (date a)) media
  hastacheStr defaultConfig (encodeStr template) (mkStrContext context) >>= LZ.putStrLn

isImage = hasExt [".JPG", ".jpg"]
isVideo = hasExt [".AVI", ".MOV"]

hasExt :: [String] -> String -> Bool
hasExt s x = any (`isSuffixOf` x) s

parseImage :: FilePath -> IO Media
parseImage p = do
  print p
  -- Fetch image metadata
  exif <- Exif.fromFile p
  Just date <- Exif.getTag exif "DateTimeOriginal"
  Just orie <- Exif.getTag exif "Orientation"
  let vert = orie `elem` ["Left-bottom", "Right-top"]
  let time = readTime defaultTimeLocale "%Y:%m:%d %T" date
  -- Create large preview
  withMagickWandGenesis $ do
    (_,w) <- magickWand
    img <- readImage w $ decodeString p
    wh <- getImageWidth w
    ht <- getImageHeight w
    let ratio = fromIntegral (if vert then wh else ht) / fromIntegral previewHeight
    -- Unused background pixel color
    bgCol <- pixelWand
    setColor bgCol "black"
    magickIterate w $ \p -> do
      resizeImage p (floor $ fromIntegral wh / ratio)
                  (floor $ fromIntegral ht / ratio)
                  lanczosFilter 1.0
      -- Rotate according to exif info
      case orie of
        "Left-bottom" -> rotateImage p bgCol (-90)
        "Right-top" -> rotateImage p bgCol 90
        otherwise -> return ()
      -- Remove any metadata
      stripImage w
      return ()
    writeImages w (decodeString $ "previews/" ++ p) True
    -- Create a thumbnail
    wh <- getImageWidth w
    ht <- getImageHeight w
    let ratio = fromIntegral ht / fromIntegral thumbHeight
    magickIterate w $ \p ->
      resizeImage p (floor $ fromIntegral wh / ratio)
                  (floor $ fromIntegral ht / ratio)
                  lanczosFilter 1.0
    writeImages w (decodeString $ "thumbs2/" ++ p) True
    return ()
  --Right img <- readImage p
  return $ Photo p time

previewHeight = 528 :: Int
thumbHeight = 96 :: Int

template = "Hello, this is generated by hastache!\nPreview heights: {{previewHeight}}, {{thumbHeight}}"
context "previewHeight" = MuVariable previewHeight
context "thumbHeight" = MuVariable thumbHeight
